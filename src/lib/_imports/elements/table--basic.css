@import url("./table.selectors.css");

table,
:--s-paragraph-table {
  --font-size: var(--global-font-size--small, 12px);
  --cell-pad-vert: 1em;
  --cell-pad-horz: 2em;

  /* To prevent borders from being hidden */
  /* SEE: TABLE WITH A <thead> */
  border-collapse: separate; /* overwrite Bootstrap */
  border-spacing: 0;

  font-family: var(--global-font-family--sans--portal);
  font-size: var(--font-size);

  border-bottom: var(--global-border-width--normal) solid var(--global-color-primary--dark);
}

:--s-paragraph-table {
  display: table; /* to mimic shrink-wrap width of real table */
}

/* TABLE WITH A <thead> */
/* FAQ: To __avoid__ <thead> border scrolling away on an `o-fixed-header-table`:
        - border must be on the cells
        - table must have `border-collapse: separate` */
thead tr:last-child :is(td, th) {
  border-bottom: var(--global-border-width--normal) solid var(--global-color-primary--dark);
}

/* TABLE WITH NO <thead> */
/* FAQ: To __avoid__ styling a __nested__ table, must use direct selector `>`  */
/* FAQ: To __ensure__ border is __visible__:
        - border must be on cell
          (because table has `border-collapse: separate`) */
tbody:not(thead + tbody) > tr:first-child > :is(td, th),
:--s-paragraph-table {
  border-top: var(--global-border-width--normal) solid var(--global-color-primary--dark);;
}

/* To add bottom border to rows */
tr:not(:last-of-type) > :is(td, th),
:--s-paragraph-table p:not(:last-of-type) {
  border-bottom-width: var(--global-border-width--normal);
  border-bottom-style: solid;
  border-bottom-color: var(--global-color-primary--light);
}

/* To alternate table row colors (by coloring cells, not rows) */
/* FAQ: Colored cells hide sibling column cells scrolled underneath */
/* NOTE: On narrow screens, first column is pinned and others scroll under it */
tr:nth-child(odd) :is(th, td) {
  background: var(--global-color-background--app);
}

tr:nth-child(even) :is(th, td),
:--s-paragraph-table p:nth-child(even) {
  background: var(--global-color-primary--x-light);
}

:is(td, th),
:--s-paragraph-table p {
  vertical-align: top;
  padding-block: var(--cell-pad-vert);
  padding-inline: var(--cell-pad-horz);

  color: var(--global-color-primary--dark);
}

th {
  color: var(--global-color-primary--x-dark);

  text-align: inherit;
  /* copied from Bootstrap 4.0.0 */
}

thead > tr > th {
  font-weight: var(--bold);
}

tbody > tr > th {
  font-weight: var(--normal);
}

caption {
  font-size: var(--font-size);
  text-align: unset; /* undo Bootstrap _reboot.css */
  caption-side: top; /* override Bootstrap */

  /* To mimic table cell */
  padding-block: var(--cell-pad-vert);
  padding-inline: var(--cell-pad-horz);
}

/* Cell Content */

/* To override browser */
td ul {
  list-style: none;
  padding-inline-start: 0;
  margin-block: 0;
}

td li:not(:last-of-type) {
  /* To match line-height of other cells, but still allow space between items */
  margin-bottom: 1em;
}

/* To override browser */
td button,
:--s-paragraph-table p button {
  /* To match font-size of table cell text and links */
  font-size: inherit;
}

/* To override `site.css` or browser */
table p,
:--s-paragraph-table p {
  margin-top: 0;
}

table p:last-child,
:--s-paragraph-table p {
  margin-bottom: 0;
}

/* SEE: https://css-tricks.com/responsive-data-tables/ */
@media (max-width: 767px) {
  /* overwrite Core CMS site.css */
  :--table--is-responsive,
  :--s-paragraph-table {
    --font-size: var(--global-font-size--medium, 14px);
    --cell-pad-vert: 1.2em;
    --cell-pad-horz: 2.2em;

    font-family: var(--global-font-family--sans--portal);
    font-size: var(--font-size);

    border-top: var(--global-border-width--normal) solid var(--global-color-primary--dark);
    border-bottom: var(--global-border-width--normal) solid var(--global-color-primary--dark);
  }

  :--table--is-responsive,
  :--table--is-responsive :is(thead, tbody, th, td, tr) {
    display: block;
  }

  :--table--is-responsive tr:not(:last-of-type) > :is(td, th),
  :--s-paragraph-table p:not(:last-of-type) {
    border-bottom: unset;
  }

  :--table--is-responsive tr > :is(td, th):not(:last-of-type),
  :--s-paragraph-table p:not(:last-of-type) {
    border-bottom-width: var(--global-border-width--normal);
    border-bottom-style: solid;
    border-bottom-color: var(--global-color-primary--light);
  }

  :--table--is-responsive  tr:not(:last-of-type) {
    border-bottom: var(--global-border-width--normal) solid var(--global-color-primary--light);
  }

  /* To make cells look like left-aligned labels */
  :--table--is-responsive td:before {
    position: absolute;
    width: calc( 50% - var(--cell-pad-horz) );
    padding-right: 10px;
    white-space: nowrap;
    font-weight: bold;
    overflow: hidden;
    text-overflow: ellipsis;

    /* To mimic cell padding */
    left: var(--cell-pad-horz);
  }

  :--table--is-responsive tbody:not(thead + tbody) > tr:first-child > :is(td, th) {
    border-top: none;
  }

  /* To remove border (that should probably be in Core anyway) */
  :--table--is-responsive {
    /* To hide table headers (but not `display: none;`, for a11y) */
    & thead tr {
      position: absolute;
      top: -9999px;
      left: -9999px;
    }

    /* To make each cell behave like a "row" */
    &:has(thead) td {
      position: relative;
      padding-left: 50%;
    }

    /* To label the cells */
    /* RFE: Add `data-label` to each cell so we can use `attr(data-label)` */
    & td:before {
      content: attr(data-col);
    }

    & td:not(:first-child) th:first-child,
    td:not(:first-child) td:first-child {
      padding-inline-start: 50%;
    }

    & td:not(:last-child) th:last-child,
    td:not(:last-child) td:last-child {
      padding-inline-end: 50%;
    }

    & .c-pill {
      min-width: unset;
    }

    & td.has-table {
      padding: 10px;
    }
  }

  :--table--is-responsive.has-table {
    & tr :is(td,th):last-child {
      border-bottom: unset;
    }
  }
}